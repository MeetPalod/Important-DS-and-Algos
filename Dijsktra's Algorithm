#include <bits/stdc++.h>
using namespace std;
#define inf 100000000

vector<pair<int,int>> graph[100001];
vector<int> dist(100001 , inf);

void dijk(int srcdist, int src){
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq; //{dist, node}
    pq.push({srcdist , src});
    dist[src] = srcdist;
    while(!pq.empty()){
        int curnode = pq.top().second;
        int curdist = pq.top().first;
        pq.pop();
	if(dist[curnode]<curdist) continue; // optimization
        for(auto child : graph[curnode]){
            if(dist[child.first]> curdist + child.second){
                dist[child.first] =  curdist + child.second;
                pq.push({dist[child.first] , child.first});
            }
        }
    }
}

int main() {
    int n,m ,a,b,w; 
    cin>>n>>m;
    while(m--)
        cin>>a>>b>>w , graph[a].push_back({b,w}) , graph[b].push_back({a,w});
    dijk(0,1); // 0 dist for source node 1
    for( int i = 1 ; i <= n ; i++) cout<<dist[i]<<" ";
}

/* input : 
6 9 
1 2 4 1 6 2 2 3 5 2 6 1 3 6 8 6 5 10 3 4 6 3 5 3 5 4 5

output: 0 3 8 14 11 2 
*/
