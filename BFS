// Monk and the Islands  - https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/practice-problems/algorithm/monk-and-the-islands/description/
#include<bits/stdc++.h>
using namespace std;

vector<int> ar[10001];
int vis[10001] , lvl[10001];

void bfs(int src){
    queue<int> q;
    q.push(src);
    lvl[src]=0 , vis[src]=1;

    while(!q.empty()){
        int cur = q.front();
        q.pop();

        for(int child : ar[cur]){
            if(!vis[child]){
                q.push(child);
                lvl[child] = lvl[cur] + 1 ;
                vis[child] = 1;
            }
        }

    }
}

int main(){
	int t;
	cin>>t;
	while(t--){
		int n , m ,a, b;
		cin>>n>>m;
        for(int i=1;i<=n ; i++) ar[i].clear() , vis[i] = 0;
		for(int i=0;i<m ; i++) cin>>a>>b , ar[a].push_back(b), ar[b].push_back(a);

		bfs(1);

        cout<<lvl[n]<<endl;
		
	}
	return 0;
}
